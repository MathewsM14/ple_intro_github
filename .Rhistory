solucion <- function() {
# Asigna valores a 'a' y 'b' de manera que el valor asignado a 's' sea 100
a <- 80 # asigna valor aquí
b <- 20 # asigna valor aquí
s <- a+b
return(s)
}
solucion()
solucion <- function() {
# Asigna valores a 'a' y 'b' de manera que el valor asignado a 's' sea 100
a <- 90 # asigna valor aquí
b <- 10 # asigna valor aquí
s <- a+b
return(s)
}
solucion()
solucion <- function() {
# Ordena (sin realizar nuevas asignaciones) de manera que se devuelva un valor de 's' diferente a NULL
a <- 10
b <- 20
s <- NULL
s <- a+b
return(s)
}
solucion()
a <- c(-3, -2, -4)
mayor <- a[1]
for(num in a){
if(num > mayor){
mayor <- num
}
}
cat("El maximo del vector es:", mayor, "\n")
a <- c(3, 2, 4)
b <- c(1, 2, 3)
suma <- 0
producto <- 0
i <- 1
if (length(a) == length(b)) {
while (i <= length(a)) {
producto <- a[i] * b[i]
suma <- suma + producto
i <- i + 1
}
print(suma)
} else {
print("Los vectores tienen distintos tamaños")
}
a <- c(-3, -2, -4)
mayor <- a[1]
prueba <- 2
while (i <= length(a)) {
if (a[i] > mayor) {
mayor <- a[i]
}
prueba <- prueba + 1
}
a <- c(-3, -2, -4)
mayor <- a[1]
prueba <- 2
while (i <= length(a)) {
if (a[i] > mayor) {
mayor <- a[i]
}
prueba <- prueba + 1
}
cat("El maximo del vector es:", mayor, "\n")
a <- c(-3, 2, -4)
mayor <- a[1]
prueba <- 2
while (i <= length(a)) {
if (a[i] > mayor) {
mayor <- a[i]
}
prueba <- prueba + 1
}
cat("El maximo del vector es:", mayor, "\n")
a <- c(-3, 2, -4)
mayor <- a[1]
prueba <- 2
while (i <= length(a)) {
if (a[i] > mayor) {
mayor <- a[i]
}
prueba <- prueba + 1
}
cat("El maximo del vector es:", mayor, "\n")
a <- c(-3, -2, -4)
mayor <- a[1]
for(num in a){
if(num > mayor){
mayor <- num
}
}
cat("El maximo del vector es:", mayor, "\n")
a <- c(-3, 2, -4)
mayor <- a[1]
for(num in a){
if(num > mayor){
mayor <- num
}
}
cat("El maximo del vector es:", mayor, "\n")
# Con ciclo while
a <- c(-3, 2, -4)
mayor <- a[1]
prueba <- 1
while (i <= length(a)) {
if (a[i] > mayor) {
mayor <- a[i]
}
prueba <- prueba + 1
}
cat("El maximo del vector es:", mayor, "\n")
# Con ciclo while
a <- c(-3, 2, -4)
mayor <- a[1]
prueba <- 1
while (prueba <= length(a)) {
if (a[i] > mayor) {
mayor <- a[i]
}
prueba <- prueba + 1
}
a <- c(-3, 2, -4)
mayor <- a[1]
i <- 2
while (i <= length(a)) {
if (a[i] > mayor) {
mayor <- a[i]
}
i <- i + 1
}
cat("El maximo del vector es:", mayor, "\n")
# Crear el vector de palabras
words <- c('nombre', 'Pronombres', 'verbo', 'adverbio', 'adjetivo')
# Acceder al quinto elemento (R empieza a contar desde 1)
words[5]
rev(words)
numbers <- c(1, 3, 5.3)
numbers
sum(numbers)
length(numbers)
cumsum(numbers)
conos <- tibble(
Sabor = c('mora', 'vainilla', 'chocolate', 'mora', 'chocolate'),
Precio = c(3500, 4700, 6500, 5200, 5700)
)
library(tibble)
library(dplyr)
# Crear el data frame
conos <- tibble(
Sabor = c('mora', 'vainilla', 'chocolate', 'mora', 'chocolate'),
Precio = c(3500, 4700, 6500, 5200, 5700)
)
conos$Precio
conos %>% select(Sabor, Precio)
# Cargar librería
library(tibble)
library(dplyr)
# Crear el data frame
conos <- tibble(
Sabor = c('mora', 'vainilla', 'chocolate', 'mora', 'chocolate'),
Precio = c(3500, 4700, 6500, 5200, 5700)
)
# Ver la columna 'Precio'
conos$Precio
# Ver columnas 'Sabor' y 'Precio'
conos %>% select(Sabor, Precio)
# Invertir el orden de las filas
conos %>% slice(n():1)
# Filas de la 2 a la 3 (en R empieza desde 1)
conos %>% slice(2:3)
# Ordenar por 'Sabor' descendente
conos %>% arrange(desc(Sabor))
# Primeras 2 filas
head(conos, 2)
# Última fila
tail(conos, 1)
# Una fila aleatoria
conos %>% slice_sample(n = 1)
# Resumen estadístico de columnas numéricas
summary(conos)
# Información de estructura del data frame
glimpse(conos)
# Índices (en R, filas vienen indexadas automáticamente)
rownames(conos)
# Acceder a la fila 3
conos %>% slice(3)
# Desde la fila 2 hasta el final
conos %>% slice(2:n())
# Igual, usando `slice`
conos %>% slice(2:n())
# Filas específicas: 2 y 5
conos %>% slice(c(2, 5))
# Elemento en fila 3, columna 2 (Precio en fila 3)
conos[[3, 2]]
# Alternativamente también:
conos$Precio[3]
# Cambiar el índice a 'Sabor'
conos_i <- conos %>% column_to_rownames('Sabor')
# Cambiar el índice a 'Sabor'
conos_i <- conos %>% column_to_rownames('Sabor')
conos_i['vainilla', 'Precio']
conos_i <- conos %>% column_to_rownames('Sabor')
conos <- conos %>%
mutate(Sabor = make.unique(Sabor))
conos_i <- conos %>% column_to_rownames('Sabor')
# Ver el nuevo data frame
conos_i
# Ver columna 'Precio' en el nuevo data frame
conos_i[, 'Precio']
# Índices del nuevo data frame
rownames(conos_i)
# Precio donde el Sabor es 'chocolate'
conos_i['chocolate', 'Precio']
# Alternativamente
conos_i['vainilla', 'Precio']
# Filtrar precios mayores a 5000 (devuelve TRUE/FALSE)
conos$Precio > 5000
# Filtrar filas donde precio > 5000
conos %>% filter(Precio > 5000)
